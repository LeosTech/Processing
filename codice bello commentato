// Librerie necessarie
import g4p_controls.*; // Libreria per creare interfaccia grafica
import processing.serial.*; // Libreria per comunicazione seriale
import java.util.ArrayList; // Per gestire array dinamici

Serial myPort; // Oggetto per la porta seriale
String myString = null; // Stringa ricevuta dalla seriale

// Elementi grafici dell'interfaccia
GButton saveButton, startButton, stopButton, connectButton, saveGaussButton;
GTextField fileNameField, minValueInput, gaussValueInput, personalNameField, personalSurnameField;
GLabel temperatura;
GDropList portList;

ArrayList<Float> values = new ArrayList<Float>(); // Lista dei valori letti
String customFileName = ""; // Nome file personalizzato per il salvataggio
dfloat minGaussMeasured = Float.MAX_VALUE; // Minimo valore misurato
float minTargetValue = 0; // Valore target minimo per confronto
boolean isDemagnetizing = false; // Stato smagnetizzazione
String[] availablePorts; // Array delle porte disponibili

int lf = '\n'; // Carattere di fine riga per la lettura seriale

void setup() {
  size(900, 650, JAVA2D); // Imposta dimensioni finestra
  createGUI(); // Crea interfaccia grafica
  availablePorts = Serial.list(); // Ottiene porte seriali disponibili

  if (availablePorts.length > 0) {
    portList.setItems(availablePorts, 0); // Inserisce porte nel menu a tendina
  } else {
    portList.setItems(new String[] {"Nessuna porta trovata"}, 0);
  }
}

void draw() {
  background(255); // Sfondo bianco

  // Lettura dei dati dalla seriale
  if (myPort != null) {
    while (myPort.available() > 0) {
      myString = myPort.readStringUntil(lf);
      if (myString != null) {
        myString = trim(myString);
        temperatura.setText(myString); // Mostra il valore ricevuto
        try {
          float val = float(myString); // Converte in float
          values.add(val); // Aggiunge alla lista
          if (val < minGaussMeasured) {
            minGaussMeasured = val; // Aggiorna minimo
          }
        } catch (Exception e) {
          println("Errore parsing valore ricevuto: " + myString);
        }
      }
    }
  }

  // Mostra valori minimi
  fill(0);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Minimo misurato: " + nf(minGaussMeasured, 0, 2) + " Gauss", 50, 150);
  text("Target minimo: " + nf(minTargetValue, 0, 2) + " Gauss", 500, 150);

  drawGraph(); // Disegna grafico
}

void createGUI() {
  // Inizializzazione elementi UI
  portList = new GDropList(this, 50, 50, 300, 200);
  connectButton = new GButton(this, 370, 50, 120, 30, "Connetti");
  startButton = new GButton(this, 50, 570, 150, 40, "Start Smagnetizzazione");
  stopButton = new GButton(this, 250, 570, 150, 40, "Stop Smagnetizzazione");
  minValueInput = new GTextField(this, 500, 570, 150, 40);
  gaussValueInput = new GTextField(this, 500, 120, 150, 40);
  temperatura = new GLabel(this, 650, 50, 200, 40, "Valore Ricevuto");

  // Pulsanti e campi per salvataggio
  saveButton = new GButton(this, 650, 500, 120, 40, "Salva Grafico");
  saveGaussButton = new GButton(this, 650, 450, 120, 40, "Salva Gauss");
  fileNameField = new GTextField(this, 650, 400, 120, 30);
  personalNameField = new GTextField(this, 650, 350, 120, 30);
  personalSurnameField = new GTextField(this, 650, 300, 120, 30);

  // Impostazioni iniziali dei campi
  fileNameField.setText("Nome file");
  personalNameField.setText("Nome");
  personalSurnameField.setText("Cognome");

  // Imposta colore sfondo e testo dell'etichetta
  temperatura.setOpaque(true);
  temperatura.setBackground(color(0));
  temperatura.setTextColor(color(255));

  // Associa handler agli eventi dei pulsanti
  saveButton.addEventHandler(this, "handleButtonEvents");
  saveGaussButton.addEventHandler(this, "handleButtonEvents");
  startButton.addEventHandler(this, "handleButtonEvents");
  stopButton.addEventHandler(this, "handleButtonEvents");
  connectButton.addEventHandler(this, "handleButtonEvents");
  minValueInput.addEventHandler(this, "minValueChanged");
}

// Gestione eventi dei pulsanti
public void handleButtonEvents(GButton button, GEvent event) {
  if (button == startButton) {
    isDemagnetizing = true;
    if (myPort != null) myPort.write("START\n");
  } else if (button == stopButton) {
    isDemagnetizing = false;
    if (myPort != null) myPort.write("STOP\n");
  } else if (button == connectButton) {
    connectToSelectedPort();
  } else if (button == saveButton) {
    customFileName = fileNameField.getText();
    if (customFileName != null && customFileName.length() > 0) {
      saveGraph(customFileName);
    } else {
      println("Nome file non valido");
    }
  } else if (button == saveGaussButton) {
    String name = personalNameField.getText();
    String surname = personalSurnameField.getText();
    if (name.length() > 0 && surname.length() > 0) {
      saveGaussData(name, surname);
    } else {
      println("Nome e Cognome sono richiesti per salvare i dati");
    }
  }
}

// Cambiamento del valore minimo target
public void minValueChanged(GTextField source, GEvent event) {
  try {
    minTargetValue = float(source.getText());
  } catch (Exception e) {
    println("Errore parsing input minimo");
  }
}

// Connessione alla porta selezionata
void connectToSelectedPort() {
  int selectedIndex = portList.getSelectedIndex();
  if (availablePorts != null && selectedIndex >= 0 && selectedIndex < availablePorts.length) {
    try {
      if (myPort != null) myPort.stop();
      myPort = new Serial(this, availablePorts[selectedIndex], 9600);
      myPort.bufferUntil(lf);
      println("Connesso a: " + availablePorts[selectedIndex]);
    } catch (Exception e) {
      println("Errore nella connessione seriale: " + e.getMessage());
    }
  } else {
    println("Nessuna porta valida selezionata.");
  }
}

// Disegna grafico dei valori letti
void drawGraph() {
  stroke(0);
  noFill();
  rect(50, 200, 800, 300);

  if (values.size() > 1) {
    float maxVal = -Float.MAX_VALUE;
    float minVal = Float.MAX_VALUE;

    for (float v : values) {
      if (v > maxVal) maxVal = v;
      if (v < minVal) minVal = v;
    }

    if (maxVal == minVal) maxVal += 1;

    beginShape();
    noFill();
    stroke(0, 100, 250);

    for (int i = 0; i < values.size(); i++) {
      float x = map(i, 0, values.size(), 50, 850);
      float y = map(values.get(i), minVal, maxVal, 500, 200);
      vertex(x, y);
    }
    endShape();
  }
}

// Salva grafico in formato immagine PNG
void saveGraph(String filename) {
  PGraphics pg = createGraphics(800, 300);
  pg.beginDraw();
  pg.background(255);
  pg.stroke(0, 200, 150);
  pg.strokeWeight(2);
  pg.noFill();

  if (values.size() > 1) {
    float maxVal = -Float.MAX_VALUE;
    float minVal = Float.MAX_VALUE;

    for (float v : values) {
      if (v > maxVal) maxVal = v;
      if (v < minVal) minVal = v;
    }
    if (maxVal == minVal) maxVal += 1;

    pg.beginShape();
    for (int i = 0; i < values.size(); i++) {
      float x = map(i, 0, values.size(), 0, 800);
      float y = map(values.get(i), minVal, maxVal, 300, 0);
      pg.vertex(x, y);
    }
    pg.endShape();
  }
  pg.endDraw();
  pg.save(filename + ".png");
  println("Grafico salvato come: " + filename + ".png");
}

// Salva il valore minimo in un file di testo
void saveGaussData(String name, String surname) {
  String filename = name + "_" + surname + "_gauss_data.txt";
  String data = "Valore Gauss: " + nf(minGaussMeasured, 0, 2) + " Gauss\n";
  saveStrings(filename, new String[] {data});
  println("Dati salvati come: " + filename);
}
