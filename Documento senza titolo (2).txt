// Librerie
import g4p_controls.*;
import processing.serial.*;


Serial myPort;
String myString = null;


GButton saveGraphButton, startButton, stopButton, connectButton, saveValueButton, sensorToggleButton;
GTextField fileNameField, thresholdField, valueDisplayField, nameField, surnameField;
GLabel temperatura, ledIndicator;
GDropList portList;
ArrayList<Float> values = new ArrayList<Float>();
String customFileName = "";
float minGaussMeasured = Float.MAX_VALUE;
float currentGauss = 0;
float thresholdValue = 0;
boolean isDemagnetizing = false;
boolean isSensorOn = false;
String[] availablePorts;
int lf = '\n';


void setup() {
  size(950, 700, JAVA2D);
  G4P.setGlobalColorScheme(GCScheme.GOLD_SCHEME);
  createGUI();
  availablePorts = Serial.list();


  if (availablePorts.length > 0) {
    portList.setItems(availablePorts, 0);
  } else {
    portList.setItems(new String[] {"Nessuna porta trovata"}, 0);
  }
}


void draw() {
  background(255);


  // Lettura seriale se sensore attivo
  if (myPort != null && isSensorOn) {
    while (myPort.available() > 0) {
      myString = myPort.readStringUntil(lf);
      if (myString != null) {
        myString = trim(myString);
        try {
          float val = float(myString);
          currentGauss = val;
          values.add(val);
          valueDisplayField.setText(nf(val, 0, 2));
          if (val < minGaussMeasured) minGaussMeasured = val;
        }
        catch (Exception e) {
          println("Errore parsing: " + myString);
        }
      }
    }
  }


  // Indicatore LED
  if (currentGauss < thresholdValue) {
    ledIndicator.setText("🟢 VALORE OK");
  } else {
    ledIndicator.setText("🔴 FUORI SOGLIA");
  }


  fill(0);
  textSize(16);
  text("Minimo misurato: " + nf(minGaussMeasured, 0, 2) + " Gauss", 50, 180);
  text("Soglia impostata: " + nf(thresholdValue, 0, 2) + " Gauss", 500, 180);


  drawGraph();
}


public void createGUI() {
  portList = new GDropList(this, 50, 30, 250, 200);
  connectButton = new GButton(this, 320, 30, 100, 30, "Connetti");


  sensorToggleButton = new GButton(this, 450, 30, 150, 30, "Attiva Sensore");


  valueDisplayField = new GTextField(this, 650, 30, 120, 30);
  valueDisplayField.setPromptText("Gauss");


  ledIndicator = new GLabel(this, 800, 30, 120, 30, "Stato");


  startButton = new GButton(this, 50, 600, 150, 40, "Start Smagnetizzazione");
  stopButton = new GButton(this, 250, 600, 150, 40, "Stop Smagnetizzazione");


  thresholdField = new GTextField(this, 500, 600, 100, 40);
  thresholdField.setPromptText("Soglia Gauss");
  thresholdField.addEventHandler(this, "thresholdChanged");


  saveGraphButton = new GButton(this, 50, 660, 150, 30, "Salva Grafico");
  saveValueButton = new GButton(this, 250, 660, 150, 30, "Salva Valore Gauss");


  fileNameField = new GTextField(this, 450, 660, 150, 30);
  fileNameField.setPromptText("Nome File");


  nameField = new GTextField(this, 650, 600, 120, 30);
  nameField.setPromptText("Nome");


  surnameField = new GTextField(this, 780, 600, 120, 30);
  surnameField.setPromptText("Cognome");


  startButton.addEventHandler(this, "handleButtonEvents");
  stopButton.addEventHandler(this, "handleButtonEvents");
  connectButton.addEventHandler(this, "handleButtonEvents");
  sensorToggleButton.addEventHandler(this, "handleButtonEvents");
  saveGraphButton.addEventHandler(this, "handleButtonEvents");
  saveValueButton.addEventHandler(this, "handleButtonEvents");
}


public void thresholdChanged(GTextField source, GEvent event) {
  try {
    thresholdValue = float(source.getText());
  } catch (Exception e) {
    println("Errore soglia.");
  }
}


public void handleButtonEvents(GButton button, GEvent event) {
  if (button == startButton && myPort != null) {
    isDemagnetizing = true;
    myPort.write("START\n");
  }


  if (button == stopButton && myPort != null) {
    isDemagnetizing = false;
    myPort.write("STOP\n");
  }


  if (button == connectButton) {
    connectToSelectedPort();
  }


  if (button == sensorToggleButton) {
    isSensorOn = !isSensorOn;
    sensorToggleButton.setText(isSensorOn ? "Disattiva Sensore" : "Attiva Sensore");
  }


  if (button == saveGraphButton) {
    if (checkUserData()) {
      saveGraph(fileNameField.getText());
    }
  }


  if (button == saveValueButton) {
    if (checkUserData()) {
      saveSingleValue(currentGauss, fileNameField.getText());
    }
  }
}


boolean checkUserData() {
  if (nameField.getText().length() == 0 || surnameField.getText().length() == 0) {
    println("Inserisci nome e cognome.");
    return false;
  }
  return true;
}


void connectToSelectedPort() {
  int selectedIndex = portList.getSelectedIndex();
  if (availablePorts != null && selectedIndex >= 0 && selectedIndex < availablePorts.length) {
    try {
      if (myPort != null) {
        myPort.stop();
      }
      myPort = new Serial(this, availablePorts[selectedIndex], 9600);
      myPort.bufferUntil(lf);
      println("Connesso a: " + availablePorts[selectedIndex]);
    }
    catch (Exception e) {
      println("Errore connessione seriale.");
    }
  }
}


void drawGraph() {
  stroke(0);
  noFill();
  rect(50, 220, 800, 300);


  if (values.size() > 1) {
    float maxVal = max(values.toArray(new Float[0]));
    float minVal = min(values.toArray(new Float[0]));
    if (maxVal == minVal) maxVal += 1;


    beginShape();
    stroke(0, 100, 250);
    for (int i = 0; i < values.size(); i++) {
      float x = map(i, 0, values.size(), 50, 850);
      float y = map(values.get(i), minVal, maxVal, 500, 220);
      vertex(x, y);
    }
    endShape();
  }
}


void saveGraph(String filename) {
  if (filename.length() == 0) return;


  String[] lines = new String[values.size() + 2];
  lines[0] = "Operatore: " + nameField.getText() + " " + surnameField.getText();
  lines[1] = "Valori Gauss:";
  for (int i = 0; i < values.size(); i++) {
    lines[i + 2] = nf(values.get(i), 1, 3);
  }


  saveStrings(filename + "_grafico.txt", lines);
  println("Grafico salvato come " + filename + "_grafico.txt");
}


void saveSingleValue(float gauss, String filename) {
  if (filename.length() == 0) return;
  String[] lines = {
    "Operatore: " + nameField.getText() + " " + surnameField.getText(),
    "Valore Gauss attuale: " + nf(gauss, 1, 3)
  };
  saveStrings(filename + "_valore.txt", lines);
  println("Valore salvato come " + filename + "_valore.txt");
}